#!/usr/bin/env node

/**
 * @license
 * (c) 2015 Cluster Labs, Inc. https://cluster.co/
 * License: MIT
 */

var fs = require('fs');
var path = require('path');

var minimist = require('minimist');

var skit = require('../../skit');
var loader = require('../lib/loader/loader');


function usage(command) {
  function usage_path_to_root() {
      console.log('  path_to_root - The root path for the skit tree, which')
      console.log('                 contains "public" serving directory and')
      console.log('                 serves as the root of skit module paths.')
  }
  function usage_path_to_optimized_root() {
      console.log('  path_to_optimized_root - The root path for the optimized')
      console.log('                 tree, which will be generated by this')
      console.log('                 command.')
  }

  switch (command) {
    case 'run':
      console.log('usage: skit run <path_to_root> [--port=3001] [--debug] [--public-root=public]')
      console.log()
      console.log('  Run the skit webserver for a given module root.')
      console.log()
      console.log('arguments:')
      console.log()
      usage_path_to_root()
      console.log('  debug        - Run the server in debug mode, which will')
      console.log('                 reload the modules in the package root')
      console.log('                 with every request, and output detailed')
      console.log('                 error messaging.')
      console.log('  port         - Port for the server to listen on.')
      console.log('  public-root  - Name of the "public" directory for this app.')
      console.log()
      break;

    case 'optimize':
      console.log('usage: skit optimize <path_to_root> <path_to_optimized_root>')
      console.log('                    [--static-host=<host>] [--public-root=public]')
      console.log()
      console.log('  Generate an optimized tree from the given skit root,')
      console.log('  writing the result tree to the given path. You can later')
      console.log('  run this tree in production with the standard command,')
      console.log('  `skit run <optimized_root>`.')
      console.log()
      console.log('arguments:')
      console.log()
      usage_path_to_root()
      usage_path_to_optimized_root()
      break;

    case 'skeleton':
      console.log('usage: skit skeleton <new_path_to_root>')
      console.log()
      console.log('  Generate a new empty skit project with recommended')
      console.log('  project structure.')
      console.log()
      console.log('arguments:')
      console.log()
      console.log('  new_path_to_root - Path where we will create a new empty')
      console.log('                 skit project for you.')
      console.log()
      break;

    default:
      console.log('usage: skit help <command>')
      console.log()
      console.log('Commands: run optimize skeleton')
  }
  process.exit(1);
}


function validate_root(root, opt_publicRootName) {
  try {
    var dir = fs.statSync(root);
  } catch (e) {
    return 'Could not read <path_to_root>', '(' + e + ')';
  }

  if (!dir.isDirectory()) {
    return '<path_to_root> must be a directory.';
  }

  try {
    var publicPath = path.join(root, opt_publicRootName || 'public');
    var publicDir = fs.statSync(publicPath);
  } catch (e) {
    return 'Could not read "public" directory inside <path_to_root> (' + publicPath + ')';
  }

  if (!publicDir.isDirectory()) {
    return '<path_to_root> must contain "public" directory.';
  }

  return null;
}

function command_run(args, positionalArgs) {
  var usage_run = usage.bind(this, 'run');

  if (positionalArgs.length != 1) {
    usage_run();
  }
  var root = positionalArgs[0];

  var errorMessage = validate_root(root, args['public-root']);
  if (errorMessage) {
    console.log(errorMessage);
    console.log();
    usage_run();
  }

  var options = {
    debug: args['debug'],
    publicRoot: args['public-root'],
  };

  var notFoundProxy = args['not-found-proxy'];
  if (notFoundProxy) {
    options.notFoundProxy = notFoundProxy;
  }

  var aliasMap = args['alias-map'];
  if (aliasMap) {
    options.aliasMap = aliasMap;
  }
  
  var server = new skit.SkitServer(root, options);
  var port = args['port'];
  server.listen(port);
  console.log('Skit server listening on 0.0.0.0:' + port);
}


function command_optimize(args, positionalArgs) {
  var usage_optimize = usage.bind(this, 'optimize');

  if (positionalArgs.length != 2) {
    usage_optimize();
  }
  var root = positionalArgs[0];
  var optimizedRoot = positionalArgs[1];

  var errorMessage = validate_root(root, args['public-root']);
  if (errorMessage) {
    console.log(errorMessage);
    console.log();
    usage_optimize();
  }

  try {
    fs.statSync(optimizedRoot);

    console.log('<path_to_optimized_root> already exists!');
    console.log()
    usage();
  } catch (e) {
    if (e.code != 'ENOENT') {
      throw e;
    }
  }

  var aliasMap = args['alias-map'] || '__alias_map__.json';

  var server = new skit.SkitServer(root, {
    publicRoot: args['public-root'],
  });
  skit.optimizeServer(server, optimizedRoot, {aliasMap: aliasMap})

  console.log()
  console.log('Generated optimized skit root. To run this, use:');
  console.log()
  console.log('  skit run ' + optimizedRoot + ' --alias-map=' + aliasMap)
  console.log()
}


function command_skeleton(args, positionalArgs) {
  var usage_skeleton = usage.bind(this, 'skeleton');

  if (positionalArgs.length != 1) {
    usage_skeleton();
  }

  var newRoot= path.normalize(path.resolve(positionalArgs[0]));

  try {
    fs.statSync(newRoot);

    console.log('<new_path_to_root> already exists!');
    console.log()
    usage();
  } catch (e) {
    if (e.code != 'ENOENT') {
      throw e;
    }
  }

  // Copy all the example files to a new location.
  var originalBasePath = path.join(__dirname, '../example/skeleton/');
  var exampleFiles = loader.walkSync(originalBasePath);
  exampleFiles.forEach(function(filename) {
    var newFilename = filename.replace(originalBasePath, newRoot);
    loader.mkdirPSync(path.dirname(newFilename));
    fs.writeFileSync(newFilename, fs.readFileSync(filename));
  });

  console.log()
  console.log('Generated new skit root! To run this, use:');
  console.log()
  console.log('  skit run ' + newRoot + ' --debug');
  console.log()
}


function main() {
  var args = minimist(process.argv.slice(2), {
    default: {
      'port': 3001
    },
    string: ['static-root', 'alias-map', 'public-root', 'not-found-proxy'],
    boolean: ['debug'],
  });

  var positionalArgs = args['_'];
  var command = positionalArgs.shift();

  switch (command) {
    case 'run':
      command_run(args, positionalArgs);
      break;

    case 'optimize':
      command_optimize(args, positionalArgs);
      break;

    case 'skeleton':
      command_skeleton(args, positionalArgs);
      break;

    case 'help':
      usage(positionalArgs[0]);
      break;

    default:
      usage();
      break;
  }
}


main();
